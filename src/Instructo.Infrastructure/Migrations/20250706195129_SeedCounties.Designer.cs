// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250706195129_SeedCounties")]
    partial class SeedCounties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArrCertificateSchool", b =>
                {
                    b.Property<int>("CertificatesId")
                        .HasColumnType("int");

                    b.Property<Guid>("SchoolsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CertificatesId", "SchoolsId");

                    b.HasIndex("SchoolsId");

                    b.ToTable("SchoolCertificates", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ArrCertificate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ARRCertificates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Certificate for general goods transportation",
                            Name = "Atestat pentru transport marfă"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Certificate for passenger transportation",
                            Name = "Atestat pentru transport persoane"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Certificate for dangerous goods transportation (ADR)",
                            Name = "Atestat ADR"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Certificate for oversized load transportation",
                            Name = "Atestat pentru transport agabaritic"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Certificate for taxi transportation",
                            Name = "Atestat pentru transport taxi"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Certificate for transport managers (CPI)",
                            Name = "Atestat pentru manager de transport (CPI)"
                        },
                        new
                        {
                            Id = 64,
                            Description = "Certificate for driving instructors",
                            Name = "Atestat pentru instructor auto"
                        },
                        new
                        {
                            Id = 128,
                            Description = "Certificate for road legislation teachers",
                            Name = "Atestat pentru profesor de legislație rutieră"
                        },
                        new
                        {
                            Id = 256,
                            Description = "Certificate for safety advisors for the transport of dangerous goods",
                            Name = "Atestat pentru consilier de siguranță"
                        });
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Counties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AB",
                            Name = "Alba"
                        },
                        new
                        {
                            Id = 2,
                            Code = "AR",
                            Name = "Arad"
                        },
                        new
                        {
                            Id = 3,
                            Code = "AG",
                            Name = "Argeș"
                        },
                        new
                        {
                            Id = 4,
                            Code = "BC",
                            Name = "Bacău"
                        },
                        new
                        {
                            Id = 5,
                            Code = "BH",
                            Name = "Bihor"
                        },
                        new
                        {
                            Id = 6,
                            Code = "BN",
                            Name = "Bistrița-Năsăud"
                        },
                        new
                        {
                            Id = 7,
                            Code = "BT",
                            Name = "Botoșani"
                        },
                        new
                        {
                            Id = 8,
                            Code = "BV",
                            Name = "Brașov"
                        },
                        new
                        {
                            Id = 9,
                            Code = "BR",
                            Name = "Brăila"
                        },
                        new
                        {
                            Id = 10,
                            Code = "B",
                            Name = "București"
                        },
                        new
                        {
                            Id = 11,
                            Code = "BZ",
                            Name = "Buzău"
                        },
                        new
                        {
                            Id = 12,
                            Code = "CS",
                            Name = "Caraș-Severin"
                        },
                        new
                        {
                            Id = 13,
                            Code = "CL",
                            Name = "Călărași"
                        },
                        new
                        {
                            Id = 14,
                            Code = "CJ",
                            Name = "Cluj"
                        },
                        new
                        {
                            Id = 15,
                            Code = "CT",
                            Name = "Constanța"
                        },
                        new
                        {
                            Id = 16,
                            Code = "CV",
                            Name = "Covasna"
                        },
                        new
                        {
                            Id = 17,
                            Code = "DB",
                            Name = "Dâmbovița"
                        },
                        new
                        {
                            Id = 18,
                            Code = "DJ",
                            Name = "Dolj"
                        },
                        new
                        {
                            Id = 19,
                            Code = "GL",
                            Name = "Galați"
                        },
                        new
                        {
                            Id = 20,
                            Code = "GR",
                            Name = "Giurgiu"
                        },
                        new
                        {
                            Id = 21,
                            Code = "GJ",
                            Name = "Gorj"
                        },
                        new
                        {
                            Id = 22,
                            Code = "HR",
                            Name = "Harghita"
                        },
                        new
                        {
                            Id = 23,
                            Code = "HD",
                            Name = "Hunedoara"
                        },
                        new
                        {
                            Id = 24,
                            Code = "IL",
                            Name = "Ialomița"
                        },
                        new
                        {
                            Id = 25,
                            Code = "IS",
                            Name = "Iași"
                        },
                        new
                        {
                            Id = 26,
                            Code = "IF",
                            Name = "Ilfov"
                        },
                        new
                        {
                            Id = 27,
                            Code = "MM",
                            Name = "Maramureș"
                        },
                        new
                        {
                            Id = 28,
                            Code = "MH",
                            Name = "Mehedinți"
                        },
                        new
                        {
                            Id = 29,
                            Code = "MS",
                            Name = "Mureș"
                        },
                        new
                        {
                            Id = 30,
                            Code = "NT",
                            Name = "Neamț"
                        },
                        new
                        {
                            Id = 31,
                            Code = "OT",
                            Name = "Olt"
                        },
                        new
                        {
                            Id = 32,
                            Code = "PH",
                            Name = "Prahova"
                        },
                        new
                        {
                            Id = 33,
                            Code = "SM",
                            Name = "Satu Mare"
                        },
                        new
                        {
                            Id = 34,
                            Code = "SJ",
                            Name = "Sălaj"
                        },
                        new
                        {
                            Id = 35,
                            Code = "SB",
                            Name = "Sibiu"
                        },
                        new
                        {
                            Id = 36,
                            Code = "SV",
                            Name = "Suceava"
                        },
                        new
                        {
                            Id = 37,
                            Code = "TR",
                            Name = "Teleorman"
                        },
                        new
                        {
                            Id = 38,
                            Code = "TM",
                            Name = "Timiș"
                        },
                        new
                        {
                            Id = 39,
                            Code = "TL",
                            Name = "Tulcea"
                        },
                        new
                        {
                            Id = 40,
                            Code = "VS",
                            Name = "Vaslui"
                        },
                        new
                        {
                            Id = 41,
                            Code = "VL",
                            Name = "Vâlcea"
                        },
                        new
                        {
                            Id = 42,
                            Code = "VN",
                            Name = "Vrancea"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SchoolEntities.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BussinessHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IconId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumbersGroups")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName");

                    b.HasIndex("IconId");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Schools", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VehicleCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Mopeds",
                            Name = "AM"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Motorcycles with maximum 125cm³ cylinder capacity, maximum power of 11kW, and power-to-weight ratio not exceeding 0.1kW/kg; Motor tricycles with maximum power of 15kW",
                            Name = "A1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Motorcycles with maximum power of 35kW, power-to-weight ratio not exceeding 0.2kW/kg, and not derived from a vehicle with more than twice its power",
                            Name = "A2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Motorcycles with or without sidecar and motor tricycles with power over 15kW",
                            Name = "A"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Quadricycles with unladen mass not exceeding 400kg (550kg for goods transport vehicles), excluding the mass of batteries for electric vehicles, equipped with internal combustion engine not exceeding 15kW net maximum power or electric motor not exceeding 15kW continuous rated power",
                            Name = "B1"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Vehicles with maximum authorized mass not exceeding 3,500kg and with no more than 8 seats in addition to the driver's seat; Vehicle-trailer combinations where the trailer's maximum authorized mass doesn't exceed 750kg; Vehicle-trailer combinations not exceeding 4,250kg total, where the trailer's maximum authorized mass exceeds 750kg",
                            Name = "B"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Vehicle-trailer combinations exceeding 4,250kg total, comprising a category B vehicle and a trailer or semi-trailer with maximum authorized mass not exceeding 3,500kg",
                            Name = "BE"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Vehicles other than those in categories D or D1, with maximum authorized mass exceeding 3,500kg but not exceeding 7,500kg, designed to carry maximum 8 passengers in addition to the driver. These vehicles may be coupled with a trailer not exceeding 750kg maximum authorized mass",
                            Name = "C1"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Vehicle-trailer combinations comprising a C1 vehicle and a trailer or semi-trailer with maximum authorized mass exceeding 750kg, provided the total doesn't exceed 12,000kg; Combinations where the towing vehicle is category B and the trailer or semi-trailer has a maximum authorized mass exceeding 3,500kg, provided the total doesn't exceed 12,000kg",
                            Name = "C1E"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Vehicles other than those in categories D or D1, with maximum authorized mass exceeding 3,500kg, designed to carry maximum 8 passengers in addition to the driver; Combinations comprising a category C vehicle and a trailer with maximum authorized mass not exceeding 750kg",
                            Name = "C"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Vehicle-trailer combinations comprising a category C vehicle and a trailer or semi-trailer with maximum authorized mass exceeding 750kg",
                            Name = "CE"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Vehicles designed to carry maximum 16 passengers in addition to the driver, with maximum length not exceeding 8m; Combinations comprising a D1 vehicle and a trailer with maximum authorized mass not exceeding 750kg",
                            Name = "D1"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Vehicle-trailer combinations comprising a D1 vehicle and a trailer with maximum authorized mass exceeding 750kg. The trailer must not be designed to carry passengers",
                            Name = "D1E"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Vehicles designed to carry more than 8 passengers in addition to the driver. These vehicles may be coupled with a trailer not exceeding 750kg maximum authorized mass",
                            Name = "D"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Vehicle-trailer combinations comprising a category D vehicle and a trailer with maximum authorized mass exceeding 750kg. The trailer must not be designed to carry passengers",
                            Name = "DE"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Agricultural or forestry tractors",
                            Name = "Tr"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Trolleybus",
                            Name = "Tb"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Tram",
                            Name = "Tv"
                        });
                });

            modelBuilder.Entity("Domain.Entities.WebsiteLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IconId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("WebsiteLinks", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolVehicleCategory", b =>
                {
                    b.Property<Guid>("SchoolsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleCategoriesId")
                        .HasColumnType("int");

                    b.HasKey("SchoolsId", "VehicleCategoriesId");

                    b.HasIndex("VehicleCategoriesId");

                    b.ToTable("SchoolCategories", (string)null);
                });

            modelBuilder.Entity("SchoolWebsiteLink", b =>
                {
                    b.Property<Guid>("SchoolsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebsiteLinksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SchoolsId", "WebsiteLinksId");

                    b.HasIndex("WebsiteLinksId");

                    b.ToTable("SchoolWebsiteLinks", (string)null);
                });

            modelBuilder.Entity("ArrCertificateSchool", b =>
                {
                    b.HasOne("Domain.Entities.ArrCertificate", null)
                        .WithMany()
                        .HasForeignKey("CertificatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SchoolEntities.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.County", "County")
                        .WithMany("Cities")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");
                });

            modelBuilder.Entity("Domain.Entities.SchoolEntities.School", b =>
                {
                    b.HasOne("Domain.Entities.Image", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.HasOne("Domain.Entities.ApplicationUser", "Owner")
                        .WithOne("School")
                        .HasForeignKey("Domain.Entities.SchoolEntities.School", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.WebsiteLink", b =>
                {
                    b.HasOne("Domain.Entities.Image", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolVehicleCategory", b =>
                {
                    b.HasOne("Domain.Entities.SchoolEntities.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehicleCategory", null)
                        .WithMany()
                        .HasForeignKey("VehicleCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWebsiteLink", b =>
                {
                    b.HasOne("Domain.Entities.SchoolEntities.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WebsiteLink", null)
                        .WithMany()
                        .HasForeignKey("WebsiteLinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("School");
                });

            modelBuilder.Entity("Domain.Entities.County", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
